#!/usr/bin/env ruby

ENV["BUNDLE_GEMFILE"] = File.expand_path("../Gemfile", __FILE__)
require 'bundler/setup'

require 'optparse'
require 'net/http'
require 'uri'
require 'rfusefs'

class PacketFS < FuseFS::FuseDir

  def initialize(storage, host)
    @storage = storage

    uri = URI(host)
    @http = Net::HTTP.new(uri.host, uri.port)
  end

  def directory?(path)
    File.directory?(@storage + path)
  end

  def file?(path)
    File.file?(@storage + path)
  end

  def contents(path)
    puts @storage + path
    Dir.entries(@storage + path)
  end

  def executable?(path)
    File.executable?(@storage + path)
  end

  def times(path)
    file = @storage + path
    [File.atime(file), File.mtime(file), File.ctime(file)]
  end

  def read_file(path)
    File.read(@storage + path)
  end

  def can_write?(path)
    if File.exist?(path)
      File.writable?(@storage + path)
    else
      File.writable?(File.dirname(@storage + path))
    end
  end

  def write_to(path, str)
    File.write(@storage + path, str)
    @http.put(path, str)
  end

  def can_delete?(path)
    File.writable?(@storage + path)
  end

  def delete(path)
    File.delete(@storage + path)
    @http.delete(path)
  end

  def can_mkdir?(path)
    if File.exist?(path)
      File.writable?(@storage + path)
    else
      File.writable?(File.dirname(@storage + path))
    end
  end

  def mkdir(path)
    Dir.mkdir(@storage + path)
    @http.put(path + '?dir', nil)
  end

  def can_rmdir?(path)
    File.writable?(@storage + path)
  end

  def rmdir(path)
    Dir.rmdir(@storage + path)
    @http.delete(path + '?dir')
  end

  def touch(path, modtime)
    FileUtils.touch(@storage + path, mtime: Time.now)
  end

end

mount_dir = ARGV.shift
storage = ARGV.shift
host = ARGV.shift

root = PacketFS.new(storage, host)
FuseFS.set_root(root)
FuseFS.mount_under(mount_dir, *ARGV)

params = ARGV.getopts('d')
unless params['d']
    Process.daemon
end
FuseFS.run
